declare function clone(configObject: any): {
    (v: any, b: any): any;
    clone: typeof clone;
    ROUND_UP: number;
    ROUND_DOWN: number;
    ROUND_CEIL: number;
    ROUND_FLOOR: number;
    ROUND_HALF_UP: number;
    ROUND_HALF_DOWN: number;
    ROUND_HALF_EVEN: number;
    ROUND_HALF_CEIL: number;
    ROUND_HALF_FLOOR: number;
    EUCLID: number;
    config: (obj: any) => {
        DECIMAL_PLACES: number;
        ROUNDING_MODE: number;
        EXPONENTIAL_AT: number[];
        RANGE: number[];
        CRYPTO: boolean;
        MODULO_MODE: number;
        POW_PRECISION: number;
        FORMAT: {
            prefix: string;
            groupSize: number;
            secondaryGroupSize: number;
            groupSeparator: string;
            decimalSeparator: string;
            fractionGroupSize: number;
            fractionGroupSeparator: string;
            suffix: string;
        };
        ALPHABET: string;
    };
    set(obj: any): {
        DECIMAL_PLACES: number;
        ROUNDING_MODE: number;
        EXPONENTIAL_AT: number[];
        RANGE: number[];
        CRYPTO: boolean;
        MODULO_MODE: number;
        POW_PRECISION: number;
        FORMAT: {
            prefix: string;
            groupSize: number;
            secondaryGroupSize: number;
            groupSeparator: string;
            decimalSeparator: string;
            fractionGroupSize: number;
            fractionGroupSeparator: string;
            suffix: string;
        };
        ALPHABET: string;
    };
    isBigNumber(v: any): boolean;
    maximum: () => any;
    max(): any;
    minimum: () => any;
    min(): any;
    random: (dp: any) => any;
    sum(): any;
};
export declare var BigNumber: {
    (v: any, b: any): any;
    clone: typeof clone;
    ROUND_UP: number;
    ROUND_DOWN: number;
    ROUND_CEIL: number;
    ROUND_FLOOR: number;
    ROUND_HALF_UP: number;
    ROUND_HALF_DOWN: number;
    ROUND_HALF_EVEN: number;
    ROUND_HALF_CEIL: number;
    ROUND_HALF_FLOOR: number;
    EUCLID: number;
    config: (obj: any) => {
        DECIMAL_PLACES: number;
        ROUNDING_MODE: number;
        EXPONENTIAL_AT: number[];
        RANGE: number[];
        CRYPTO: boolean;
        MODULO_MODE: number;
        POW_PRECISION: number;
        FORMAT: {
            prefix: string;
            groupSize: number;
            secondaryGroupSize: number;
            groupSeparator: string;
            decimalSeparator: string;
            fractionGroupSize: number;
            fractionGroupSeparator: string;
            suffix: string;
        };
        ALPHABET: string;
    };
    set(obj: any): {
        DECIMAL_PLACES: number;
        ROUNDING_MODE: number;
        EXPONENTIAL_AT: number[];
        RANGE: number[];
        CRYPTO: boolean;
        MODULO_MODE: number;
        POW_PRECISION: number;
        FORMAT: {
            prefix: string;
            groupSize: number;
            secondaryGroupSize: number;
            groupSeparator: string;
            decimalSeparator: string;
            fractionGroupSize: number;
            fractionGroupSeparator: string;
            suffix: string;
        };
        ALPHABET: string;
    };
    isBigNumber(v: any): boolean;
    maximum: () => any;
    max(): any;
    minimum: () => any;
    min(): any;
    random: (dp: any) => any;
    sum(): any;
};
export default BigNumber;
